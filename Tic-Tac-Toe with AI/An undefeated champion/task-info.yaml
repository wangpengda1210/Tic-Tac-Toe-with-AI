type: edu
custom_name: stage5
files:
- name: src/tictactoe/Main.java
  visible: true
  text: |
    package tictactoe;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: "import org.hyperskill.hstest.dynamic.DynamicTest;\nimport org.hyperskill.hstest.stage.StageTest;\n\
    import org.hyperskill.hstest.testcase.CheckResult;\nimport org.hyperskill.hstest.testing.TestedProgram;\n\
    \nimport java.util.List;\n\n\npublic class TicTacToeTest extends StageTest<String>\
    \ {\n\n    int[] easyAiMoves = new int[9];\n\n    @DynamicTest(order = 0)\n  \
    \  CheckResult testBadParameters() {\n\n        TestedProgram program = new TestedProgram();\n\
    \        program.start();\n\n        String output = program.execute(\"start\"\
    );\n        if (!output.toLowerCase().contains(\"bad parameters\")) {\n      \
    \      return CheckResult.wrong(\"After entering start command with wrong parameters\
    \ you should print 'Bad parameters!' and ask to enter a command again!\");\n \
    \       }\n\n        output = program.execute(\"start easy\");\n        if (!output.toLowerCase().contains(\"\
    bad parameters\")) {\n            return CheckResult.wrong(\"After entering start\
    \ command with wrong parameters you should print 'Bad parameters!' and ask to\
    \ enter a command again!\");\n        }\n\n        program.execute(\"exit\");\n\
    \n        if (!program.isFinished()) {\n            return CheckResult.wrong(\"\
    After entering 'exit' command you should stop the program!\");\n        }\n\n\
    \        return CheckResult.correct();\n    }\n\n\n    @DynamicTest(order = 1)\n\
    \    CheckResult testGridOutput() {\n\n        TestedProgram program = new TestedProgram();\n\
    \n        program.start();\n\n        String output = program.execute(\"start\
    \ user easy\");\n\n        Grid printedGrid = Grid.fromOutput(output);\n     \
    \   Grid emptyGrid = Grid.fromLine(\"_________\");\n\n        if (!printedGrid.equals(emptyGrid))\
    \ {\n            return CheckResult.wrong(\"After starting the program you should\
    \ print an empty grid!\\n\" +\n                \"Correct empty grid:\\n\" + emptyGrid);\n\
    \        }\n\n        if (!output.toLowerCase().contains(\"enter the coordinates:\"\
    )) {\n            return CheckResult.wrong(\"After printing an empty grid you\
    \ should ask to enter cell coordinates!\");\n        }\n\n        output = program.execute(\"\
    2 2\");\n\n        Grid gridAfterMove = Grid.fromOutput(output);\n        Grid\
    \ correctGridAfterMove = Grid.fromLine(\"____X____\");\n\n        if (!gridAfterMove.equals(correctGridAfterMove))\
    \ {\n            return CheckResult.wrong(\"After making the move wrong grid was\
    \ printed.\\n\" +\n                \"Your grid:\\n\" + gridAfterMove + \"\\n\"\
    \ +\n                \"Correct grid:\\n\" + correctGridAfterMove);\n        }\n\
    \n        if (!output.toLowerCase().contains(\"making move level \\\"easy\\\"\"\
    )) {\n            return CheckResult.wrong(\"After entering a cell coordinates\
    \ you should print:\\nMaking move level \\\"easy\\\"\");\n        }\n\n      \
    \  Grid gridAfterAiMove = Grid.fromOutput(output, 2);\n\n        if (gridAfterAiMove.equals(gridAfterMove))\
    \ {\n            return CheckResult.wrong(\"After AI move grid wasn't changed!\"\
    );\n        }\n\n        Grid gameGrid = gridAfterAiMove;\n\n        while (true)\
    \ {\n            if (gameGrid.getGameState() != GameState.NOT_FINISHED) {\n  \
    \              switch (gameGrid.getGameState()) {\n                    case X_WIN:\n\
    \                        if (!output.contains(\"X wins\")) {\n               \
    \             return CheckResult.wrong(\"You should print 'X wins' if X win the\
    \ game\");\n                        }\n                        break;\n      \
    \              case O_WIN:\n                        if (!output.contains(\"O wins\"\
    )) {\n                            return CheckResult.wrong(\"You should print\
    \ 'O wins' if O win the game\");\n                        }\n                \
    \        break;\n                    case DRAW:\n                        if (!output.contains(\"\
    Draw\")) {\n                            return CheckResult.wrong(\"You should\
    \ print 'Draw' if the game ends with draw!\");\n                        }\n  \
    \                      break;\n                }\n                break;\n   \
    \         }\n            Position nextMove = Minimax.getMove(gameGrid, CellState.X);\n\
    \n            Grid tempGrid = gameGrid.copy();\n            tempGrid.setCell(nextMove.x,\
    \ nextMove.y, CellState.X);\n\n            output = program.execute((nextMove.x\
    \ + 1) + \" \" + (nextMove.y + 1));\n\n            gameGrid = Grid.fromOutput(output);\n\
    \n            if (!gameGrid.equals(tempGrid)) {\n                return CheckResult.wrong(\"\
    After making move (\" + nextMove + \") the game grid is wrong!\\n\" +\n      \
    \              \"Your gird\\n\" + gameGrid + \"\\n\" +\n                    \"\
    Correct grid\\n\" + tempGrid);\n            }\n\n            if (gameGrid.getGameState()\
    \ != GameState.NOT_FINISHED)\n                continue;\n\n            gameGrid\
    \ = Grid.fromOutput(output, 2);\n        }\n\n        return CheckResult.correct();\n\
    \    }\n\n    @DynamicTest(repeat = 100, order = 2)\n    CheckResult checkEasyAi()\
    \ {\n        TestedProgram program = new TestedProgram();\n        program.start();\n\
    \n        program.execute(\"start user easy\");\n\n        String output = program.execute(\"\
    2 2\");\n\n        Grid gridAfterAiMove = Grid.fromOutput(output, 2);\n\n    \
    \    CellState[][] array = gridAfterAiMove.getGrid();\n\n        for (int i =\
    \ 0; i < 9; i++) {\n            if (i == 4) {\n                continue;\n   \
    \         }\n            if (array[i / 3][i % 3] == CellState.O) {\n         \
    \       easyAiMoves[i]++;\n            }\n        }\n\n        return CheckResult.correct();\n\
    \    }\n\n    @DynamicTest(order = 3)\n    CheckResult checkRandom() {\n     \
    \   double averageScore = 0;\n\n        for (int i = 0; i < easyAiMoves.length;\
    \ i++) {\n            averageScore += (i + 1) * easyAiMoves[i];\n        }\n\n\
    \        averageScore /= 8;\n\n        double expectedValue = (double) (1 + 2\
    \ + 3 + 4 + 6 + 7 + 8 + 9) * 100 / 8 / 8;\n\n        if (Math.abs(averageScore\
    \ - expectedValue) > 20) {\n            return CheckResult.wrong(\"Looks like\
    \ your Easy level AI doesn't make a random move!\");\n        }\n\n        return\
    \ CheckResult.correct();\n    }\n\n    @DynamicTest(order = 4)\n    CheckResult\
    \ checkEasyNotMovingLikeMedium() {\n        for (int i = 0; i < 30; i++) {\n \
    \           TestedProgram program = new TestedProgram();\n            program.start();\n\
    \            program.execute(\"start user easy\");\n\n            String output\
    \ = program.execute(\"2 2\");\n\n            Grid gameGrid = Grid.fromOutput(output,\
    \ 2);\n\n            CellState[][] cellStates = gameGrid.getGrid();\n\n      \
    \      if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY)\
    \ {\n                output = program.execute(\"1 1\");\n                gameGrid\
    \ = Grid.fromOutput(output, 2);\n                if (gameGrid.getGrid()[2][2]\
    \ == CellState.EMPTY) {\n                    return CheckResult.correct();\n \
    \               }\n            } else {\n                output = program.execute(\"\
    1 3\");\n                gameGrid = Grid.fromOutput(output, 2);\n            \
    \    if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {\n                    return\
    \ CheckResult.correct();\n                }\n            }\n\n            program.stop();\n\
    \        }\n\n        return CheckResult.wrong(\"Looks like your Easy level AI\
    \ doesn't make a random move!\");\n    }\n\n\n    @DynamicTest(order = 5)\n  \
    \  CheckResult checkEasyVsEasy() {\n\n        TestedProgram program = new TestedProgram();\n\
    \        program.start();\n\n        String output = program.execute(\"start easy\
    \ easy\");\n\n        List<Grid> gridList = Grid.allGridsFromOutput(output);\n\
    \n        Grid.checkGridSequence(gridList);\n\n        return CheckResult.correct();\n\
    \    }\n\n    @DynamicTest(order = 6)\n    CheckResult checkMediumAi() {\n   \
    \     for (int i = 0; i < 10; i++) {\n            TestedProgram program = new\
    \ TestedProgram();\n            program.start();\n            program.execute(\"\
    start user medium\");\n\n            String output = program.execute(\"2 2\");\n\
    \n            Grid gameGrid = Grid.fromOutput(output, 2);\n\n            CellState[][]\
    \ cellStates = gameGrid.getGrid();\n\n            if (cellStates[0][0] == CellState.EMPTY\
    \ && cellStates[2][2] == CellState.EMPTY) {\n                output = program.execute(\"\
    1 1\");\n                gameGrid = Grid.fromOutput(output, 2);\n            \
    \    if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {\n                    return\
    \ CheckResult.wrong(\"Looks like your Medium level AI doesn't make a correct move!\"\
    );\n                }\n            } else {\n                output = program.execute(\"\
    1 3\");\n                gameGrid = Grid.fromOutput(output, 2);\n            \
    \    if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {\n                    return\
    \ CheckResult.wrong(\"Looks like your Medium level AI doesn't make a correct move!\"\
    );\n                }\n            }\n            program.stop();\n        }\n\
    \n        return CheckResult.correct();\n    }\n\n    @DynamicTest(order = 7,\
    \ repeat = 5)\n    CheckResult checkMediumVsMedium() {\n\n        TestedProgram\
    \ program = new TestedProgram();\n        program.start();\n\n        String output\
    \ = program.execute(\"start medium medium\");\n\n        List<Grid> gridList =\
    \ Grid.allGridsFromOutput(output);\n\n        Grid.checkGridSequence(gridList);\n\
    \n        return CheckResult.correct();\n    }\n\n    @DynamicTest(order = 8)\n\
    \    CheckResult checkMediumNotMovingLikeHard() {\n\n        for (int i = 0; i\
    \ < 30; i++) {\n            TestedProgram program = new TestedProgram();\n   \
    \         program.start();\n\n            program.execute(\"start user medium\"\
    );\n\n            String output = program.execute(\"2 2\");\n\n            Grid\
    \ userMoveGrid = Grid.fromOutput(output, 1);\n            Grid mediumMoveGrid\
    \ = Grid.fromOutput(output, 2);\n\n            Position mediumMove = Grid.getMove(userMoveGrid,\
    \ mediumMoveGrid);\n\n            List<Position> minimaxCorrectPositions = Minimax.getAvailablePositions(userMoveGrid,\
    \ CellState.O);\n\n            if (!minimaxCorrectPositions.contains(mediumMove))\
    \ {\n                return CheckResult.correct();\n            }\n        }\n\
    \n        return CheckResult.wrong(\"Looks like Medium level AI doesn't make a\
    \ random move!\");\n    }\n\n    @DynamicTest(order = 8)\n    CheckResult checkHardAi()\
    \ {\n\n        TestedProgram program = new TestedProgram();\n        program.start();\n\
    \n        String output = program.execute(\"start user hard\");\n        Grid\
    \ grid = Grid.fromOutput(output);\n        Position nextMove = Minimax.getMove(grid,\
    \ CellState.X);\n        output = program.execute((nextMove.x + 1) + \" \" + (nextMove.y\
    \ + 1));\n\n        while (!output.toLowerCase().contains(\"win\") && !output.toLowerCase().contains(\"\
    draw\")) {\n            Grid gridAfterUserMove = Grid.fromOutput(output);\n  \
    \          Grid gridAfterAiMove = Grid.fromOutput(output, 2);\n            Position\
    \ aiMove = Grid.getMove(gridAfterUserMove, gridAfterAiMove);\n\n            List<Position>\
    \ correctMinimaxMovePositions = Minimax.getAvailablePositions(gridAfterUserMove,\
    \ CellState.O);\n            if (!correctMinimaxMovePositions.contains(aiMove))\
    \ {\n                return CheckResult.wrong(\"Your minimax algorithm is wrong!\
    \ It chooses wrong positions to make a move!\");\n            }\n            \n\
    \            nextMove = Minimax.getMove(gridAfterAiMove, CellState.X);\n\n   \
    \         output = program.execute((nextMove.x + 1) + \" \" + (nextMove.y + 1));\n\
    \        }\n\n        return CheckResult.correct();\n    }\n\n    @DynamicTest(order\
    \ = 9)\n    CheckResult checkHardVsHard() {\n\n        for (int i = 0; i < 5;\
    \ i++) {\n            TestedProgram program = new TestedProgram();\n         \
    \   program.start();\n\n            String output = program.execute(\"start hard\
    \ hard\");\n\n            if (!output.toLowerCase().contains(\"draw\")) {\n  \
    \              return CheckResult.wrong(\"The result of the game between minimax\
    \ algorithms should be always 'Draw'!\\n\" +\n                    \"Make sure\
    \ your output contains 'Draw'.\");\n            }\n        }\n\n        return\
    \ CheckResult.correct();\n    }\n}\n"
  learner_created: false
- name: src/tictactoe/GameState.java
  visible: true
  text: |
    package tictactoe;

    public enum GameState {

        XWin("X wins"), OWin("O wins"),
        DRAW("Draw"), NOT_COMPLETED("Game not finished");

        private final String status;
        GameState(String status) {
            this.status = status;
        }

        public String getStatus() {
            return status;
        }

    }
  learner_created: true
- name: src/tictactoe/GameBoard.java
  visible: true
  text: |
    package tictactoe;

    import java.util.Arrays;
    import java.util.InputMismatchException;

    public class GameBoard {

        private final CellStatus[][] cells = new CellStatus[3][3];
        private int crossCount;
        private int circleCount;

        public GameBoard() {
            this("_________");
        }

        public GameBoard(String pattern) {
            crossCount = 0;
            circleCount = 0;
            initializeBoard(pattern);
        }

        private void initializeBoard(String pattern) {
            if (pattern.length() != 9) {
                throw new InputMismatchException("Should contain 9 symbols");
            }

            for (int i = 0; i < pattern.length(); i++) {
                switch (pattern.charAt(i)) {
                    case 'X':
                        cells[i / 3][i % 3] = CellStatus.CROSS;
                        crossCount++;
                        break;
                    case 'O':
                        cells[i / 3][i % 3] = CellStatus.CIRCLE;
                        circleCount++;
                        break;
                    case '_':
                        cells[i / 3][i % 3] = CellStatus.EMPTY;
                        break;
                    default:
                        throw new InputMismatchException("Not a valid symbol: " +
                                pattern.charAt(i));
                }
            }
        }

        public boolean addSymbol(int row, int col) {
            if (cells[row - 1][col - 1].equals(CellStatus.EMPTY)) {
                CellStatus nextSymbol = getNextSymbol();

                cells[row - 1][col - 1] = nextSymbol;

                if (nextSymbol == CellStatus.CROSS) {
                    crossCount++;
                } else {
                    circleCount++;
                }
                return true;
            } else {
                return false;
            }
        }

        public CellStatus getNextSymbol() {
            if (circleCount == crossCount) {
                return CellStatus.CROSS;
            } else {
                return CellStatus.CIRCLE;
            }
        }

        public GameState getGameState() {
            for (CellStatus[] row : cells) {
                if (Arrays.stream(row).allMatch(it -> it == CellStatus.CIRCLE)) {
                    return GameState.OWin;
                }

                if (Arrays.stream(row).allMatch(it -> it == CellStatus.CROSS)) {
                    return GameState.XWin;
                }
            }

            for (int j = 0; j < cells[0].length; j++) {
                boolean allCross = true;
                boolean allCircle = true;

                for (CellStatus[] cell : cells) {
                    if (cell[j] == CellStatus.EMPTY) {
                        allCross = false;
                        allCircle = false;
                    } else if (cell[j] == CellStatus.CIRCLE) {
                        allCross = false;
                    } else {
                        allCircle = false;
                    }
                }

                if (allCross) {
                    return GameState.XWin;
                } else if (allCircle) {
                    return GameState.OWin;
                }
            }

            CellStatus[] dig = new CellStatus[] { cells[0][0], cells[1][1], cells[2][2] };
            CellStatus[] counterDig = new CellStatus[] { cells[0][2], cells[1][1], cells[2][0] };

            if (Arrays.stream(dig).allMatch(it -> it == CellStatus.CIRCLE) ||
                    Arrays.stream(counterDig).allMatch(it -> it == CellStatus.CIRCLE)) {
                return GameState.OWin;
            }

            if (Arrays.stream(dig).allMatch(it -> it == CellStatus.CROSS) ||
                    Arrays.stream(counterDig).allMatch(it -> it == CellStatus.CROSS)) {
                return GameState.XWin;
            }

            if (Arrays.stream(cells).flatMap(Arrays::stream).anyMatch(it -> it == CellStatus.EMPTY)) {
                return GameState.NOT_COMPLETED;
            } else {
                return GameState.DRAW;
            }

        }

        public int getRowToWin() {
            for (int i = 0; i < cells.length; i++) {
                CellStatus[] row = cells[i];

                if (isCellsToWin(row)) {
                    return i + 1;
                }
            }

            return -1;
        }

        public int getColToWin() {
            for (int j = 0; j < cells[0].length; j++) {
                int numCircle = 0;
                int numCross = 0;

                for (CellStatus[] cell : cells) {
                    if (cell[j] == CellStatus.CIRCLE) {
                        numCircle++;
                    } else if (cell[j] == CellStatus.CROSS) {
                        numCross++;
                    }
                }

                if ((numCircle == cells[0].length - 1 && numCross == 0) ||
                        (numCircle == 0 && numCross == cells[0].length - 1)) {
                    return j + 1;
                }
            }

            return -1;
        }

        public boolean isDigToWin() {
            CellStatus[] dig = new CellStatus[] { cells[0][0], cells[1][1], cells[2][2] };

            return isCellsToWin(dig);
        }

        public boolean isCounterDigToWin() {
            CellStatus[] counterDig = new CellStatus[] { cells[0][2], cells[1][1], cells[2][0] };

            return isCellsToWin(counterDig);
        }

        private boolean isCellsToWin(CellStatus[] cells) {
            long numCircle = Arrays.stream(cells)
                    .filter(cellStatus -> cellStatus == CellStatus.CIRCLE)
                    .count();
            long numCross = Arrays.stream(cells)
                    .filter(cellStatus -> cellStatus == CellStatus.CROSS)
                    .count();

            return (numCircle == cells.length - 1 && numCross == 0) ||
                    (numCircle == 0 && numCross == cells.length - 1);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("---------\n");
            for (CellStatus[] row : cells) {
                sb.append("| ");
                for (CellStatus cellStatus : row) {
                    sb.append(cellStatus.getPattern()).append(" ");
                }
                sb.append("|\n");
            }
            sb.append("---------");

            return sb.toString();
        }

    }
  learner_created: true
- name: src/tictactoe/Computer.java
  visible: true
  text: |
    package tictactoe;

    import java.util.Random;

    public class Computer {

        private final GameLevel gameLevel;

        public Computer(GameLevel gameLevel) {
            this.gameLevel = gameLevel;
        }

        public void move(GameBoard gameBoard) {
            System.out.println("Making move level \"" + this.gameLevel.getLevel() + "\"");
            if (this.gameLevel == GameLevel.EASY) {
                easyMove(gameBoard);
            } else if (this.gameLevel == GameLevel.MEDIUM) {
                mediumMove(gameBoard);
            }
        }

        private void mediumMove(GameBoard gameBoard) {
            int rowToWin = gameBoard.getRowToWin();
            if (rowToWin != -1) {
                gameBoard.addSymbol(rowToWin, 1);
                gameBoard.addSymbol(rowToWin, 2);
                gameBoard.addSymbol(rowToWin, 3);
                return;
            }

            int colToWin = gameBoard.getColToWin();
            if (colToWin != -1) {
                gameBoard.addSymbol(1, colToWin);
                gameBoard.addSymbol(2, colToWin);
                gameBoard.addSymbol(3, colToWin);
                return;
            }

            if (gameBoard.isDigToWin()) {
                gameBoard.addSymbol(1, 1);
                gameBoard.addSymbol(2, 2);
                gameBoard.addSymbol(3, 3);
            } else if (gameBoard.isCounterDigToWin()) {
                gameBoard.addSymbol(1, 3);
                gameBoard.addSymbol(2, 2);
                gameBoard.addSymbol(3, 1);
            } else {
                easyMove(gameBoard);
            }
        }

        private void easyMove(GameBoard gameBoard) {
            Random random = new Random();
            int row = random.nextInt(3) + 1;
            int col = random.nextInt(3) + 1;

            while (!gameBoard.addSymbol(row, col)) {
                row = random.nextInt(3) + 1;
                col = random.nextInt(3) + 1;
            }
        }

    }
  learner_created: true
- name: src/tictactoe/GameLevel.java
  visible: true
  text: |
    package tictactoe;

    public enum GameLevel {

        EASY("easy"), MEDIUM("medium"), HARD("hard"), USER("user"), NULL("");

        private final String level;
        GameLevel(String level) {
            this.level = level;
        }

        public String getLevel() {
            return level;
        }

        public static GameLevel findLevel(String level) {
            for (GameLevel gameLevel : GameLevel.values()) {
                if (gameLevel.getLevel().equals(level.toLowerCase())) {
                    return gameLevel;
                }
            }
            return NULL;
        }

    }
  learner_created: true
- name: src/tictactoe/CellStatus.java
  visible: true
  text: |
    package tictactoe;

    public enum CellStatus {

        CROSS("X"), CIRCLE("O"), EMPTY(" ");

        private final String pattern;
        CellStatus(String pattern) {
            this.pattern = pattern;
        }

        public String getPattern() {
            return pattern;
        }

    }
  learner_created: true
- name: test/Grid.java
  visible: false
  text: |-
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;
    import java.util.stream.Collectors;
    import java.util.stream.Stream;

    public class Grid {

        private final CellState[][] grid;

        private Grid() {
            grid = new CellState[3][3];
        }

        public static Grid fromLine(String line) {
            Grid grid = new Grid();

            if (line.length() != 9) {
                throw new WrongAnswer("Wrong input length. Expected 9.\nFound " + line.length());
            }

            for (int i = 0; i < line.length(); i++) {
                grid.grid[i / 3][i % 3] = CellState.get(line.charAt(i));
            }

            return grid;
        }

        public static Grid fromOutput(String stringField) {
            return fromOutput(stringField, 1);
        }

        public static Grid fromOutput(String stringField, int fieldNumber) {

            Grid grid = new Grid();

            List<String> fieldLines = Arrays.stream(stringField.split("\n"))
                .map(String::strip)
                .filter(line -> line.startsWith("|") && line.endsWith("|"))
                .collect(Collectors.toList());

            if (fieldLines.size() < 3 * fieldNumber) {
                throw new WrongAnswer("Expected not less than " + fieldNumber + " grids in the output!\n" +
                    "Make sure you print the game grids in the correct format!");
            }

            fieldLines = fieldLines.subList(fieldNumber * 3 - 3, fieldNumber * 3);

            for (int i = 0; i < fieldLines.size(); i++) {
                String line = fieldLines.get(i);
                if (line.length() != 9) {
                    throw new WrongAnswer("Can't parse the game field. The following line has wrong length:\n" + line);
                }
                for (int j = 0; j < 3; j++) {
                    grid.grid[i][j] = CellState.get(line.charAt(j * 2 + 2));
                }
            }

            return grid;
        }

        public static List<Grid> allGridsFromOutput(String stringField) {

            List<Grid> gridList = new ArrayList<>();

            List<String> fieldLines = Arrays.stream(stringField.split("\n"))
                .map(String::strip)
                .filter(line -> line.startsWith("|") && line.endsWith("|"))
                .collect(Collectors.toList());

            if (fieldLines.size() % 3 != 0) {
                throw new WrongAnswer("Wrong grid output format! Each grid should contain 3 lines that starts and ends with '|' symbol!");
            }

            for (int i = 0; i < fieldLines.size() / 3; i++) {
                List<String> gridLines = fieldLines.subList(i * 3, i * 3 + 3);

                Grid grid = new Grid();

                for (int j = 0; j < gridLines.size(); j++) {
                    String line = gridLines.get(j);
                    if (line.length() != 9) {
                        throw new WrongAnswer("Can't parse the game field. The following line has wrong length:\n" + line);
                    }
                    for (int k = 0; k < 3; k++) {
                        grid.grid[j][k] = CellState.get(line.charAt(k * 2 + 2));
                    }
                }

                gridList.add(grid);
            }

            return gridList;
        }

        public static Position getMove(Grid from, Grid to) {
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (from.grid[i][j] != to.grid[i][j]) {
                        return new Position(i, j);
                    }
                }
            }
            throw new WrongAnswer("After making a move the grid was the same!");
        }

        public boolean isWin(CellState player) {
            for (int i = 0; i < 3; i++) {
                if (grid[i][0] == grid[i][1] && grid[i][1] == grid[i][2] && grid[i][2] == player) {
                    return true;
                }
            }

            for (int i = 0; i < 3; i++) {
                if (grid[0][i] == grid[1][i] && grid[1][i] == grid[2][i] && grid[2][i] == player) {
                    return true;
                }
            }

            return grid[0][0] == grid[1][1] && grid[1][1] == grid[2][2] && grid[2][2] == player
                || grid[2][0] == grid[1][1] && grid[1][1] == grid[0][2] && grid[0][2] == player;
        }

        public boolean hasEmptyCells() {
            return Arrays.stream(grid)
                .flatMap(Stream::of)
                .anyMatch(cell -> cell == CellState.EMPTY);
        }

        public int getNumOfEmptyCells() {
            return (int) Arrays.stream(grid)
                .flatMap(Stream::of)
                .filter(cell -> cell == CellState.EMPTY).count();
        }

        public GameState getGameState() {
            if (isWin(CellState.X)) return GameState.X_WIN;
            if (isWin(CellState.O)) return GameState.O_WIN;
            if (hasEmptyCells()) return GameState.NOT_FINISHED;
            else return GameState.DRAW;
        }

        public CellState[][] getGrid() {
            return grid;
        }

        public void setCell(int x, int y, CellState cellState) {
            grid[x][y] = cellState;
        }

        public boolean isCorrectNextGrid(Grid grid) {
            return getNumOfEmptyCells() - grid.getNumOfEmptyCells() == 1;
        }

        public boolean isValidGrid() {

            int numOfX = (int) Arrays.stream(grid)
                .flatMap(Stream::of)
                .filter(cell -> cell == CellState.X).count();
            int numOfO = (int) Arrays.stream(grid)
                .flatMap(Stream::of)
                .filter(cell -> cell == CellState.O).count();

            return Math.abs(numOfO - numOfX) <= 1;
        }

        public static void checkGridSequence(List<Grid> grids) {
            if (grids.size() <= 1) {
                return;
            }

            for (int i = 1; i < grids.size(); i++) {
                Grid prevGrid = grids.get(i - 1);
                Grid grid = grids.get(i);
                if (!grid.isValidGrid()) {
                    throw new WrongAnswer("Impossible grid was printed! The difference between Os and Xs in the grid is greater than 1:\n" + grid);
                }
                if (!prevGrid.isCorrectNextGrid(grid)) {
                    throw new WrongAnswer("After making a move on grid\n" + prevGrid + "\n it can't become\n" + grid);
                }
            }

            Grid lastGrid = grids.get(grids.size() - 1);

            if (lastGrid.getGameState() == GameState.NOT_FINISHED) {
                throw new WrongAnswer("Last grid is not terminal!\n" + lastGrid);
            }
        }

        @Override
        public String toString() {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("---------").append("\n");
            for (int i = 0; i < 3; i++) {
                stringBuilder.append("| ").append(grid[i][0]).append(" ").append(grid[i][1]).append(" ").append(grid[i][2]).append(" |\n");
            }
            stringBuilder.append("---------");
            return stringBuilder.toString();
        }

        private String toLine() {
            StringBuilder result = new StringBuilder();
            for (int i = 0; i < 9; i++) {
                result.append(grid[i / 3][i % 3]);
            }
            return result.toString();
        }

        @Override
        public boolean equals(Object o) {
            if (!(o instanceof Grid)) {
                return false;
            }

            Grid grid = (Grid) o;

            for (int i = 0; i < 9; i++) {
                if (grid.grid[i / 3][i % 3] != this.grid[i / 3][i % 3]) {
                    return false;
                }
            }
            return true;
        }

        public Grid copy() {
            return Grid.fromLine(toLine());
        }
    }

    enum GameState {

        X_WIN, O_WIN, DRAW, NOT_FINISHED

    }

    enum CellState {

        X("X"), O("O"), EMPTY(" ");

        String value;

        CellState(String value) {
            this.value = value;
        }

        static CellState get(char symbol) {
            switch (symbol) {
                case 'X':
                    return X;
                case 'O':
                    return O;
                case ' ':
                case '_':
                    return EMPTY;
                default:
                    throw new WrongAnswer("Bad symbol '" + symbol + "' in the game grid");
            }
        }

        static CellState getOpponent(CellState player) {
            if (player == X) {
                return O;
            } else {
                return X;
            }
        }

        @Override
        public String toString() {
            return value;
        }
    }
  learner_created: false
- name: test/Minimax.java
  visible: false
  text: |+
    import java.util.ArrayList;
    import java.util.List;

    public class Minimax {

        private static Position bestPosition;

        public static Position getMove(Grid grid, CellState player) {

            int bestScore = Integer.MIN_VALUE;

            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (grid.getGrid()[i][j] == CellState.EMPTY) {
                        grid.setCell(i, j, player);
                        int score = minimax(grid, CellState.getOpponent(player), false, player, 1);
                        grid.setCell(i, j, CellState.EMPTY);
                        if (score > bestScore) {
                            bestScore = score;
                            bestPosition = new Position(i, j);
                        }
                    }
                }
            }

            return bestPosition;
        }

        private static int minimax(Grid grid, CellState player, boolean isMaximize, CellState startPlayer, int depth) {

            switch (grid.getGameState()) {
                case X_WIN:
                    return startPlayer == CellState.X ? 10 - depth : depth - 10;
                case O_WIN:
                    return startPlayer == CellState.O ? 10 - depth : depth - 10;
                case DRAW:
                    return 0;
            }

            int bestScore = isMaximize ? Integer.MIN_VALUE : Integer.MAX_VALUE;

            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (grid.getGrid()[i][j] == CellState.EMPTY) {
                        grid.setCell(i, j, player);
                        int score = minimax(grid, CellState.getOpponent(player), !isMaximize, startPlayer, depth + 1);
                        grid.setCell(i, j, CellState.EMPTY);
                        bestScore = isMaximize ? Math.max(bestScore, score) : Math.min(bestScore, score);
                    }
                }
            }

            return bestScore;
        }

        public static List<Position> getAvailablePositions(Grid grid, CellState player) {

            List<Position> positions = new ArrayList<>();

            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (grid.getGrid()[i][j] == CellState.EMPTY) {
                        grid.setCell(i, j, player);
                        int score = minimax(grid, CellState.getOpponent(player), false, player, 1);
                        if (score >= 0) {
                            positions.add(new Position(i, j));
                        }
                        grid.setCell(i, j, CellState.EMPTY);
                    }
                }
            }

            return positions;
        }
    }

    class Position {

        int x;
        int y;

        public Position(int x, int y) {
            this.x = x;
            this.y = y;
        }

        @Override
        public String toString() {
            return x + " " + y;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Position position = (Position) o;
            return x == position.x &&
                y == position.y;
        }
    }



  learner_created: false
feedback_link: https://hyperskill.org/projects/81/stages/451/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Fri, 15 Jan 2021 02:18:26 UTC
record: -1
